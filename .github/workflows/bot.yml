name: bot

on:
  workflow_dispatch: null

jobs:
  bot:
    name: bot
    runs-on: "ubuntu-latest"
    steps:
      - name: skip me
        shell: bash -l {0}
        if: success() && contains(github.event.head_commit.message, 'ci skip')
        run: |
          echo "commit message: '${MSG}'"
          echo "::set-env name=CI_SKIP::true"
        env:
          MSG: ${{ github.event.head_commit.message }}

      - uses: actions/checkout@v2
        if: success() && ! env.CI_SKIP

      - uses: goanpeca/setup-miniconda@v1
        if: success() && ! env.CI_SKIP
        with:
          python-version: 3.7
          channels: conda-forge,defaults
          channel-priority: strict
          show-channel-urls: true

      - name: do local setup and stop me if needed
        shell: bash -l {0}
        if: success() && ! env.CI_SKIP
        run: |
          source local_setup.sh
          python stop_me_if_needed.py

      - name: write heartbeat
        shell: bash -l {0}
        if: success() && ! env.CI_SKIP
        run: |
          python write_heartbeat.py ${ACTION_NAME}
        env:
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}
          ACTION_NAME: ${{ github.workflow }}

      - name: install bot code
        shell: bash -l {0}
        if: success() && ! env.CI_SKIP
        run: |
          source install_bot_code.sh
        env:
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}

      - name: collect feedstocks
        shell: bash -l {0}
        if: success() && ! env.CI_SKIP
        run: |
          pushd cf-graph
          conda activate run_env

          conda-forge-tick --run 0
          popd
        env:
          USERNAME: regro-cf-autotick-bot
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}

      - name: make graph
        shell: bash -l {0}
        if: success() && ! env.CI_SKIP
        run: |
          pushd cf-graph
          conda activate run_env

          conda-forge-tick --run 1
          popd
        env:
          USERNAME: regro-cf-autotick-bot
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}

      - name: run migrations
        shell: bash -l {0}
        if: success() && ! env.CI_SKIP
        run: |
          pushd cf-graph
          conda activate run_env

          conda-forge-tick --run 3
          popd
        env:
          USERNAME: regro-cf-autotick-bot          
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}

      - name: deploy
        shell: bash -l {0}
        if: github.ref == 'refs/heads/master' && ! cancelled() && ! env.CI_SKIP
        run: |
          pushd cf-graph
          conda activate run_env

          export CIRCLE_BUILD_URL="https://github.com/regro/autotick-bot/actions/runs/${RUN_ID}"
          export CIRCLE_BUILD_NUM="actually-actions-${RUN_ID}"
          conda-forge-tick --run -1

          popd
        env:
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}
          RUN_ID: ${{ github.run_id }}

      - name: trigger next job
        uses: benc-uk/workflow-dispatch@v1
        if: github.ref == 'refs/heads/master' && ! cancelled() && ! failure() && ! env.CI_SKIP
        with:
          workflow: bot
          token: ${{ secrets.AUTOTICK_BOT_TOKEN }}

      - name: bump on fail
        shell: bash -l {0}
        if: github.ref == 'refs/heads/master' && failure() && ! env.CI_SKIP
        run: |
          export ACTION_URL="https://github.com/regro/autotick-bot/actions/runs/${RUN_ID}"
          python bump_bot_team.py
        env:
          PASSWORD: ${{ secrets.AUTOTICK_BOT_TOKEN }}
          RUN_ID: ${{ github.run_id }}
          ACTION_NAME: ${{ github.workflow }}
